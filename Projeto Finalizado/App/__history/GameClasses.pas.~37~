unit GameClasses;

interface

uses
  SOiS.Utils.Interfaces,
  System.Classes,
  System.SysUtils,
  System.UITypes,
  System.StrUtils,
  System.Threading,
  Math,
  FMX.Objects,
  FMX.Ani,
  FMX.Types,
  FMX.Effects,
  FMX.Forms,
  FMX.Layouts,
  FMX.Graphics,
  FMX.StdCtrls,
  System.Generics.Collections;


type
  TAnimation = class(TFloatAnimation)
  private
    FTarget: TFmxObject;
    FFinish: TProc<TObject>;
    FProcess: TProc<TFloatAnimation,TObject>;
    procedure DoFinish(Sender: TObject);
    procedure DoProcess(Sender: TObject);
  public
    function AnimeType(const Value: TAnimationType): TAnimation;
    function AnimeInterpolation(const Value: TInterpolationType): TAnimation;
    function AnimeDuration(const Value: Single): TAnimation;
    function AnimeProperty(const Value: String): TAnimation;
    function AnimeDelay(const Value: Single): TAnimation;
    function AnimeValue(const AValue: Single): TAnimation;
    function AnimeFinish(Value: TProc<TObject>): TAnimation;
    function AnimeProcess(Value: TProc<TFloatAnimation,TObject>): TAnimation;
    procedure Start; override;

    constructor Animate(ATarget: TFmxObject; APropertyName: String;
      ANewValue: Single; ADuration: Single=0.2);
  end;

  TRectangleHelper = Class helper for TRectangle
  private
    function FindLabel: TLabel;
    function FindBackground: TRectangle;
    function getValue: Single;
    procedure setValue(const Value: Single);
  public
    property Value: Single read getValue write setValue;

    function Column: Integer;
    function Line: Integer;
    function GetLeftColumn: TLayout;
    function GetRightColumn: TLayout;
    function CheckHit: Double;
    procedure AdjustLine;
  End;

var
  ColorList: TDictionary<Double, TAlphaColor>;
  AniTime: Single;
implementation

uses
  uPrincipal;


{ TAnimation }

constructor TAnimation.Animate(ATarget: TFmxObject; APropertyName: String;
  ANewValue, ADuration: Single);
begin
  inherited Create(nil);

  Parent := ATarget;
  FTarget := ATarget;
  OnFinish := DoFinish;
  OnProcess := DoProcess;

  StartFromCurrent := true;
  PropertyName := APropertyName;
  StopValue := ANewValue;
  Duration := ADuration;

end;

function TAnimation.AnimeType(const Value: TAnimationType): TAnimation;
begin
  Result := Self;
  AnimationType := Value;
end;

function TAnimation.AnimeValue(const AValue: Single): TAnimation;
begin
  Result := Self;
  StopValue := AValue;
end;

procedure TAnimation.DoFinish(Sender: TObject);
begin
  if Assigned(FFinish) then
    FFinish(FTarget);
end;

procedure TAnimation.DoProcess(Sender: TObject);
begin
  if Assigned(FProcess) then
    FProcess(self, FTarget);
end;

procedure TAnimation.Start;
begin
  inherited Start;

end;

function TAnimation.AnimeDelay(const Value: Single): TAnimation;
begin
  Result := Self;
  Delay := Value;
end;

function TAnimation.AnimeDuration(const Value: Single): TAnimation;
begin
  Result := Self;
  Duration := Value;
end;

function TAnimation.AnimeFinish(Value: TProc<TObject>): TAnimation;
begin
  Result := Self;
  FFinish := Value;
end;

function TAnimation.AnimeInterpolation(const Value: TInterpolationType): TAnimation;
begin
  Result := Self;
  Interpolation := Value;
end;

function TAnimation.AnimeProcess(
  Value: TProc<TFloatAnimation, TObject>): TAnimation;
begin
  Result := Self;
  FProcess := Value;
end;

function TAnimation.AnimeProperty(const Value: String): TAnimation;
begin
  Result := Self;
  PropertyName := Value;
end;

{ TRectangleHelper }

procedure TRectangleHelper.AdjustLine;
begin
  TAnimation.Animate(Self, 'Position.Y', Line*Height+5, 0.2);
end;

function TRectangleHelper.CheckHit: Double;
var
  LTrack, LTrackLeft, LTrackRight: TLayout;
  LPieceTop, LPieceBottom, LPieceLeft, LPieceRight: TRectangle;
  LCheckCount: Integer;
  LValue: Single;
begin
  Result := 0;
  LCheckCount  := 0;
  LTrack       := nil;
  LPieceLeft   := nil;
  LTrackRight  := nil;
  LPieceTop    := nil;
  LPieceBottom := nil;
  LTrackLeft   := nil;
  LPieceRight  := nil;

  LTrack := TLayout(Parent);
  LTrackLeft := GetLeftColumn;
  LTrackRight := GetRightColumn;

  if (LTrackLeft <> nil) and (LTrackLeft.Children.Count > Line) then
    LPieceLeft := TRectangle(LTrackLeft.Children[Line]);

  if (LTrackRight <> nil) and (LTrackRight.Children.Count > Line) then
    LPieceRight := TRectangle(LTrackRight.Children[Line]);

  if Line > 1 then
    LPieceTop := TRectangle(LTrack.Children[Line-1]);

  if Line < LTrack.ChildrenCount-1 then
    LPieceBottom := TRectangle(LTrack.Children[Line-1]);

  if (LPieceLeft <> nil) and (LPieceLeft.Value=Value) then
    Inc(LCheckCount);
  if (LPieceRight <> nil) and (LPieceRight.Value=Value) then
    Inc(LCheckCount);
  if (LPieceTop <> nil) and (LPieceTop.Value=Value) then
    Inc(LCheckCount);
//  if (LPieceBottom <> nil) and (LPieceBottom.Value=Value) then
//    Inc(LCheckCount);

  if LCheckCount=0 then
    exit;

  if LCheckCount=1 then begin // incorpora no lugar da peça anterior
    LValue := Value;
    Result := Value;
//    Inc(AnimationCount);

    if (LPieceLeft <> nil) and (LPieceLeft.Value=LValue) and not (csDestroying in LPieceLeft.ComponentState) then begin
      Self.Align := TAlignLayout.None;
      TAnimator.AnimateColor(Self.FindBackground, 'fill.color', ColorList[LValue*2], ANITIME, TAnimationType.Out, TInterpolationType.Quadratic);
      TAnimator.AnimateFloat(Self, 'Opacity', 0.4, ANITIME, TAnimationType.Out, TInterpolationType.Quadratic);
      TAnimator.AnimateFloat(Self, 'Width', Width*2+5, ANITIME, TAnimationType.Out, TInterpolationType.Quadratic);

//      Self.ActGoalLeft(-(Width+5));
      TAnimation.Animate(Self, 'Position.X', -(Width*2+5), ANITIME)
        .AnimeType(TAnimationType.Out)
        .AnimeInterpolation(TInterpolationType.Quadratic)
        .AnimeFinish(
          procedure (Sender: TObject) begin
            Sender.DisposeOf;
            Sender := nil;
          end)
        .Start;

      LPieceLeft.Value := LValue*2;
      Result := Result + LPieceLeft.CheckHit;
    end;
    if (LPieceRight <> nil) and (LPieceRight.Value=LValue) and not (csDestroying in LPieceRight.ComponentState) then begin
      Self.Align := TAlignLayout.None;
      TAnimator.AnimateColor(Self.FindBackground, 'fill.color', ColorList[LValue*2], ANITIME, TAnimationType.Out, TInterpolationType.Quadratic);
      TAnimator.AnimateFloat(Self, 'Opacity', 0.4, ANITIME, TAnimationType.Out, TInterpolationType.Quadratic);

//      Self.ActGoalRight(Width*2+5);
      TAnimation.Animate(Self, 'Position.X', (Width*2+5), ANITIME)
        .AnimeType(TAnimationType.Out)
        .AnimeInterpolation(TInterpolationType.Quadratic)
        .AnimeFinish(
          procedure (Sender: TObject) begin
            Sender.DisposeOf;
            Sender := nil;
          end)
        .Start;

      LPieceRight.Value := LValue*2;
      Result := Result + LPieceRight.CheckHit;
    end;
    if (LPieceTop <> nil) and (LPieceTop.Value=LValue) and not (csDestroying in LPieceTop.ComponentState) then begin
      Self.Align := TAlignLayout.None;
      TAnimator.AnimateColor(Self.FindBackground, 'fill.color', ColorList[LValue*2], ANITIME, TAnimationType.Out, TInterpolationType.Quadratic);
      TAnimator.AnimateFloat(Self, 'Opacity', 0.4, ANITIME, TAnimationType.Out, TInterpolationType.Quadratic);
      TAnimator.AnimateFloat(Self, 'Height', Height*2+5, ANITIME, TAnimationType.Out, TInterpolationType.Quadratic);

//      Self.ActGoalTop(Position.Y-(LPieceTop.Height+5));
      TAnimation.Animate(Self, 'Position.Y', Position.Y-Height-5, ANITIME)
        .AnimeType(TAnimationType.Out)
        .AnimeInterpolation(TInterpolationType.Quadratic)
        .AnimeFinish(
          procedure (Sender: TObject) begin
            Sender.DisposeOf;
            Sender := nil;
          end)
        .Start;

      LPieceTop.Value := LValue*2;
      Result := Result + LPieceTop.CheckHit;
    end;

  end
  else begin
//    Inc(AnimationCount);
    LValue := Value;
    Value := LValue*4;
//    Result := Result+Value;

    if (LPieceBottom <> nil) and (LPieceBottom.Value=LValue) and not (csDestroying in LPieceBottom.ComponentState) then begin // deve vir primeiro por causa do movimento de subida que subtrai 1 de children
      LPieceBottom.DisposeOf;
      LPieceBottom := nil;
    end;
    if (LPieceLeft <> nil) and (LPieceLeft.Value=LValue) and not (csDestroying in LPieceLeft.ComponentState) then begin
      LPieceLeft.DisposeOf;
      LPieceLeft := nil;
    end;
    if (LPieceRight <> nil) and (LPieceRight.Value=LValue) and not (csDestroying in LPieceRight.ComponentState) then begin
      LPieceRight.DisposeOf;
      LPieceRight := nil;
    end;
    if (LPieceTop <> nil) and (LPieceTop.Value=LValue) and not (csDestroying in LPieceTop.ComponentState) then begin
      LPieceTop.DisposeOf;
      LPieceTop := nil;
    end;

    Result := Result + CheckHit;
//    Dec(AnimationCount);
  end;
end;

function TRectangleHelper.Column: Integer;
var
  LTrack: TLayout;
begin
  LTrack := TLayout(Parent);
  Result := LTrack.Tag;
//  case IndexStr(LowerCase(LTrack.Name), ['laystrip1', 'laystrip2', 'laystrip3', 'laystrip4', 'laystrip5']) of
//    0: result := 1;
//    1: result := 2;
//    2: result := 3;
//    3: result := 4;
//    4: result := 5;
//  end;

end;

function TRectangleHelper.FindBackground: TRectangle;
var
  Obj: TFMXObject;
begin
  Obj := nil;

  for Obj in Children do begin
    if Obj is TRectangle then begin
      Result := TRectangle(Obj);
      break;
    end;
  end;

  if Obj=nil then
    raise Exception.Create('Objeto cor de fundo não encontrado.');
end;

function TRectangleHelper.FindLabel: TLabel;
var
  Obj: TFMXObject;
begin
  Obj := nil;

  if ChildrenCount=0 then begin
    result := nil;
    exit;
  end;

  for Obj in Children do begin
    if Obj is TLabel then begin
      Result := TLabel(Obj);
      break;
    end;
  end;

  if Obj=nil then
    raise Exception.Create('Objeto valor não encontrado.');
end;

function TRectangleHelper.GetLeftColumn: TLayout;
var
  I: Integer;
  LTrack: TLayout;
begin
  Result := nil;
  if Column = 1 then
    exit;

  Result := TLayout(Parent.Parent.Children[Column-2]);
end;

function TRectangleHelper.GetRightColumn: TLayout;
begin
  Result := nil;
  if Column = 5 then
    exit;

  Result := TLayout(Parent.Parent.Children[Column]);
end;

function TRectangleHelper.getValue: Single;
begin
  Result := Tag;
end;

function TRectangleHelper.Line: Integer;
begin
  Result := Parent.Children.IndexOf(Self);
end;

procedure TRectangleHelper.setValue(const Value: Single);
begin
  Tag := Round(Value);

  if Value <= Power(2,13) then
    FindLabel.Text := Value.ToString
  else if Value <= Power(2,20) then
    FindLabel.Text := Format('%dK', [Floor(Value/1024)])
  else if Value <= Power(2,30) then
    FindLabel.Text := Format('%dM', [Floor(Value/(1024*1024))])
  else if Value <= Power(2,40) then
    FindLabel.Text := Format('%dG', [Floor(Value/(1024*1024*1024))])
  else
    FindLabel.Text := Format('%dT', [Floor(Value/Power(2,40))]);

  TAnimator.AnimateColor(FindBackground, 'Fill.Color', ColorList.Items[Value], 0.3);
end;


initialization
  AniTime := 1;

  ColorList := TDictionary<Double, TAlphaColor>.Create;
  ColorList.Add(2, TAlphaColors.Yellowgreen);
  ColorList.Add(Power(2,2), TAlphaColors.Steelblue);
  ColorList.Add(Power(2,3), TAlphaColors.Indianred);
  ColorList.Add(Power(2,4), TAlphaColors.Indigo);
  ColorList.Add(Power(2,5), TAlphaColors.Gold);
  ColorList.Add(Power(2,6), TAlphaColors.Dodgerblue);
  ColorList.Add(Power(2,7), TAlphaColors.Firebrick);
  ColorList.Add(Power(2,8), TAlphaColors.Greenyellow);
  ColorList.Add(Power(2,9), TAlphaColors.Lightcoral);
  ColorList.Add(Power(2,10), TAlphaColors.Lightskyblue);
  ColorList.Add(Power(2,11), TAlphaColors.Mediumorchid);
  ColorList.Add(Power(2,12), TAlphaColors.Palevioletred);
  ColorList.Add(Power(2,13), TAlphaColors.Rosybrown);
  ColorList.Add(Power(2,14), TAlphaColors.Sandybrown);
  ColorList.Add(Power(2,15), TAlphaColors.Springgreen);
  ColorList.Add(Power(2,16), TAlphaColors.Tan);
  ColorList.Add(Power(2,17), TAlphaColors.Tomato);
  ColorList.Add(Power(2,18), TAlphaColors.Violet);
  ColorList.Add(Power(2,19), TAlphaColors.Palegreen);
  ColorList.Add(Power(2,20), TAlphaColors.Mediumspringgreen);
  ColorList.Add(Power(2,21), TAlphaColors.LegacySkyBlue);
  ColorList.Add(Power(2,22), TAlphaColors.Lightsteelblue);
  ColorList.Add(Power(2,23), TAlphaColors.Lightsalmon);
  ColorList.Add(Power(2,24), TAlphaColors.Lightpink);
  ColorList.Add(Power(2,25), TAlphaColors.Lightcoral);
  ColorList.Add(Power(2,26), TAlphaColors.Lavender);
  ColorList.Add(Power(2,27), TAlphaColors.Hotpink);
  ColorList.Add(Power(2,28), TAlphaColors.Goldenrod);
  ColorList.Add(Power(2,29), TAlphaColors.Deeppink);
  ColorList.Add(Power(2,30), TAlphaColors.Darkslateblue);
  ColorList.Add(Power(2,31), TAlphaColors.Darkred);
  ColorList.Add(Power(2,32), TAlphaColors.Darkorchid);
  ColorList.Add(Power(2,33), TAlphaColors.Darkorange);
  ColorList.Add(Power(2,34), TAlphaColors.Darkmagenta);
  ColorList.Add(Power(2,35), TAlphaColors.Crimson);
  ColorList.Add(Power(2,36), TAlphaColors.Coral);
  ColorList.Add(Power(2,37), TAlphaColors.Chocolate);
  ColorList.Add(Power(2,38), TAlphaColors.Chartreuse);
  ColorList.Add(Power(2,39), TAlphaColors.Khaki);
  ColorList.Add(Power(2,40), TAlphaColors.Palegreen);
  ColorList.Add(Power(2,41), TAlphaColors.Thistle);

finalization
  ColorList.Free;

end.
