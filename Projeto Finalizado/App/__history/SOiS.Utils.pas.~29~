unit SOiS.Utils;

interface

uses
  SOiS.Utils.Interfaces,
  System.Classes,
  System.SysUtils,
  System.UITypes,
  System.StrUtils,
  Math,
  FMX.Objects,
  FMX.Ani,
  FMX.Types,
  FMX.Effects,
  FMX.Forms,
  FMX.Layouts,
  FMX.Graphics,
  FMX.StdCtrls,
  System.Generics.Collections;


type
  TSOAnimator = class(TComponent)
  private
    FAnimation: TFloatAnimation;

    FTarget          : TFmxObject;
    FPropertyName    : String;
    FNewValue        : Single;
    FDuration        : Single;
    FDelay           : Single;
    FType            : TAnimationType;
    FInterpolation   : TInterpolationType;
    FOnFinish        : TProc<TSOAnimator, TFmxObject>;
    FOnProcess       : TProc<TSOAnimator, TFmxObject>;
    FFreeOnTerminated: Boolean;

    procedure DoFinishAnimation(Sender: TObject);
    procedure DoProcessAnimation(Sender: TObject);
  public
    function Running: Boolean;
    function Delay(Value: Single): TSOAnimator;
    function AnimationType(Value: TAnimationType): TSOAnimator;
    function Interpolation(Value: TInterpolationType): TSOAnimator;
    function AnimationObject(out Animation:TAnimation): TSOAnimator;
    function OnFinish(AProc: TProc<TSOAnimator, TFmxObject>): TSOAnimator;
    function OnProcess(AProc: TProc<TSOAnimator, TFmxObject>): TSOAnimator;
    function Start: TSOAnimator;
    procedure Stop;
    function Value(const AValue: Single): TSOAnimator;
    function Duration(const Value: Single): TSOAnimator;
    function FreeOnTerminated(const Value: Boolean): TSOAnimator;

    constructor AnimateFloat(Target: TFmxObject; PropertyName: String;
      NewValue: Single; Duration: Single=0.2);

    destructor Destroy; override;

  end;

  TRectangleHelper = Class helper for TRectangle
  private
    function FindLabel: TLabel;
    function FindBackground: TRectangle;
    function getValue: Single;
    procedure setValue(const Value: Single);
  public
    property Value: Single read getValue write setValue;

    function Column: Integer;
    function Line: Integer;
    function GetLeftColumn: TLayout;
    function GetRightColumn: TLayout;
    function CheckHit: Double;
  End;
const
{$IFDEF Android}
  ANITIME = 0.2;
{$ENDIF}
{$IFDEF WIN32 or WIN64}
  ANITIME = 0.15;
{$ENDIF}

var
  ColorList: TDictionary<Double, TAlphaColor>;
  Anime: TSOAnimator;

implementation

{ TSOAnimator }

constructor TSOAnimator.AnimateFloat(Target: TFmxObject;
  PropertyName: String; NewValue, Duration: Single);
//var
//  SW: TStopwatch;
begin
//  SW.Start;
  inherited Create(Target); // se pai for destruido, anime também será.

  FFreeOnTerminated := True;
  FTarget           := Target;
  FPropertyName     := PropertyName;
  FNewValue         := NewValue;
  FDuration         := Duration;
  FDelay            := 0.0;
  FOnFinish         := nil;
  FOnProcess        := nil;

  // nomes não são necessarios
//  Name := 'SOAnimator_'+Target.Name+'_'+StringReplace(PropertyName, '.', '', [rfReplaceAll])+'_'+IntToStr(Abs(SW.ElapsedTicks));

  FAnimation                  := TFloatAnimation.Create(self);
//  FAnimation.Name             := 'SOAni_'+Target.Name+'_'+StringReplace(PropertyName, '.', '', [rfReplaceAll])+'_'+IntToStr(Abs(SW.ElapsedTicks));
  FAnimation.Parent           := Target;
  FAnimation.StartFromCurrent := True;
  FAnimation.PropertyName     := PropertyName;
  FAnimation.StopValue        := NewValue;
  FAnimation.Duration         := Duration;
//  SW.Stop;
end;

function TSOAnimator.AnimationObject(out Animation: TAnimation): TSOAnimator;
begin
  Result := Self;
  Animation := FAnimation;
end;

function TSOAnimator.AnimationType(Value: TAnimationType): TSOAnimator;
begin
  Result := Self;
  FType := Value;
end;

function TSOAnimator.Delay(Value: Single): TSOAnimator;
begin
  Result := Self;
  FDelay := Value;
end;

destructor TSOAnimator.Destroy;
begin
{$IFDEF ANDROID}
  if Assigned(FAnimation) then begin
    FAnimation.Free;
    FAnimation := nil;
  end;
{$ELSE}
  if Assigned(FAnimation) then
    FreeAndNil(FAnimation);
{$ENDIF}

  inherited Destroy;
end;

procedure TSOAnimator.DoFinishAnimation(Sender: TObject);
begin
  if Assigned(FOnFinish) then
    FOnFinish(self, FTarget);

// DEIXA A INTERFACE CUIDAR DISSO?
  FAnimation.Stop;
  FAnimation.Free;
  if FFreeOnTerminated and (self <> nil) and not (csDestroying in self.ComponentState) then
    self.Free;
end;

procedure TSOAnimator.DoProcessAnimation(Sender: TObject);
begin
  if Assigned(FOnProcess) then
    FOnProcess(Self, FTarget);
end;

function TSOAnimator.Duration(const Value: Single): TSOAnimator;
begin
  Result := Self;
  FDuration := Value;
end;

function TSOAnimator.FreeOnTerminated(const Value: Boolean): TSOAnimator;
begin
  Result := Self;
  FFreeOnTerminated := Value;
end;

function TSOAnimator.Interpolation(Value: TInterpolationType): TSOAnimator;
begin
  Result := Self;
  FInterpolation := Value;
end;

function TSOAnimator.OnFinish(AProc: TProc<TSOAnimator, TFmxObject>): TSOAnimator;
begin
  Result := Self;
  FOnFinish := AProc;
end;

function TSOAnimator.OnProcess(AProc: TProc<TSOAnimator, TFmxObject>): TSOAnimator;
begin
  Result := Self;
  FOnProcess := AProc;
end;

function TSOAnimator.Running: Boolean;
begin
  Result := false;
  if Assigned(FAnimation) then Result := FAnimation.Running;
end;

function TSOAnimator.Start: TSOAnimator;
begin
  Result := nil;
  if csDestroying in Self.ComponentState then  Exit;
  Result := Self;
  FAnimation.StopValue     := FNewValue;
  FAnimation.Duration      := FDuration;
  FAnimation.Delay         := FDelay;
  FAnimation.AnimationType := FType;
  FAnimation.Interpolation := FInterpolation;
  FAnimation.OnFinish      := DoFinishAnimation;  // converte object method para anônimo and be happy
  FAnimation.OnProcess     := DoProcessAnimation; // converte object method para anônimo and be happy

  FAnimation.Start;
end;

procedure TSOAnimator.Stop;
begin
  FAnimation.Stop;
end;

function TSOAnimator.Value(const AValue: Single): TSOAnimator;
begin
  Result := Self;
  FNewValue := AValue;
end;


{ TRectangleHelper }

function TRectangleHelper.CheckHit: Double;
var
  LTrack, LTrackLeft, LTrackRight: TLayout;
  LPieceTop, LPieceBottom, LPieceLeft, LPieceRight: TRectangle;
  LCheckCount: Integer;
  LValue: Single;
begin
  Result := 0;
  LCheckCount  := 0;
  LTrack       := nil;
  LPieceLeft   := nil;
  LPieceTop    := nil;
  LPieceBottom := nil;
  LPieceRight  := nil;
  LTrackRight  := nil;
  LTrackLeft   := nil;

  LTrack := TLayout(Parent);
  LTrackLeft := GetLeftColumn;
  LTrackRight := GetRightColumn;

  if (LTrackLeft <> nil) and (LTrackLeft.Children.Count > Line) then
    LPieceLeft := TRectangle(LTrackLeft.Children[Line]);

  if (LTrackRight <> nil) and (LTrackRight.Children.Count > Line) then
    LPieceRight := TRectangle(LTrackRight.Children[Line]);

  if Line > 1 then
    LPieceTop := TRectangle(LTrack.Children[Line-1]);

  if Line < LTrack.ChildrenCount-1 then
    LPieceBottom := TRectangle(LTrack.Children[Line-1]);

  if (LPieceLeft <> nil) and (LPieceLeft.Value=Value) then
    Inc(LCheckCount);
  if (LPieceRight <> nil) and (LPieceRight.Value=Value) then
    Inc(LCheckCount);
  if (LPieceTop <> nil) and (LPieceTop.Value=Value) then
    Inc(LCheckCount);
//  if (LPieceBottom <> nil) and (LPieceBottom.Value=Value) then
//    Inc(LCheckCount);

  if LCheckCount=0 then
    exit;

  if LCheckCount=1 then begin // incorpora no lugar da peça anterior
    LValue := Value;
    Result := LValue*2;

    if (LPieceLeft <> nil) and (LPieceLeft.Value=LValue) and not (csDestroying in LPieceLeft.ComponentState) then begin
      Self.Align := TAlignLayout.None;
      LPieceLeft.Value := LValue*2;
      Result := Result + LPieceLeft.CheckHit;
      if not (csDestroying in Self.ComponentState) then
        Self.DisposeOf;
//      Free;
    end;
    if (LPieceRight <> nil) and (LPieceRight.Value=LValue) and not (csDestroying in LPieceRight.ComponentState) then begin
      Self.Align := TAlignLayout.None;
      LPieceRight.Value := LValue*2;
      Result := Result + LPieceRight.CheckHit;
      if not (csDestroying in Self.ComponentState) then
        Self.DisposeOf;
//      Free;
    end;
    if (LPieceTop <> nil) and (LPieceTop.Value=LValue) and not (csDestroying in LPieceTop.ComponentState) then begin
      Self.Align := TAlignLayout.None;
      LPieceTop.Value := LValue*2;
      Result := Result + LPieceTop.CheckHit;
      if not (csDestroying in Self.ComponentState) then
        Self.DisposeOf;
//      Free;
    end;
//    if (LPieceBottom <> nil) and (LPieceBottom.Value=LValue) and not (csDestroying in LPieceBottom.ComponentState) then begin // realmente necessario? talvez seja impossivel ocorrer hit abaixo com LCheckCount=1
//      LPieceBottom.Value := LValue*2;
//      Result := Result + LPieceBottom.CheckHit;
//    end;

//    DisposeOf;
//    Self := nil;
//    Free;
  end
  else begin
    LValue := Value;
    Result := LValue*4;
    Value := LValue*4;

    if (LPieceBottom <> nil) and (LPieceBottom.Value=LValue) and not (csDestroying in LPieceBottom.ComponentState) then begin // deve vir primeiro por causa do movimento de subida que subtrai 1 de children
      LPieceBottom.DisposeOf;
      LPieceBottom := nil;
    end;
    if (LPieceLeft <> nil) and (LPieceLeft.Value=LValue) and not (csDestroying in LPieceLeft.ComponentState) then begin
      LPieceLeft.DisposeOf;
      LPieceLeft := nil;
    end;
    if (LPieceRight <> nil) and (LPieceRight.Value=LValue) and not (csDestroying in LPieceRight.ComponentState) then begin
      LPieceRight.DisposeOf;
      LPieceRight := nil;
    end;
    if (LPieceTop <> nil) and (LPieceTop.Value=LValue) and not (csDestroying in LPieceTop.ComponentState) then begin
      LPieceTop.DisposeOf;
      LPieceTop := nil;
    end;

    Result := Result + CheckHit;
  end;

end;

function TRectangleHelper.Column: Integer;
var
  LTrack: TLayout;
begin
  LTrack := TLayout(Parent);
  Result := LTrack.Tag;
//  case IndexStr(LowerCase(LTrack.Name), ['laytrilha1', 'laytrilha2', 'laytrilha3', 'laytrilha4', 'laytrilha5']) of
//    0: result := 1;
//    1: result := 2;
//    2: result := 3;
//    3: result := 4;
//    4: result := 5;
//  end;

end;

function TRectangleHelper.FindBackground: TRectangle;
var
  Obj: TFMXObject;
begin
  Obj := nil;

  for Obj in Children do begin
    if Obj is TRectangle then begin
      Result := TRectangle(Obj);
      break;
    end;
  end;

  if Obj=nil then
    raise Exception.Create('Objeto cor de fundo não encontrado.');
end;

function TRectangleHelper.FindLabel: TLabel;
var
  Obj: TFMXObject;
begin
  Obj := nil;

  if ChildrenCount=0 then begin
    result := nil;
    exit;
  end;

  for Obj in Children do begin
    if Obj is TLabel then begin
      Result := TLabel(Obj);
      break;
    end;
  end;

  if Obj=nil then
    raise Exception.Create('Objeto valor não encontrado.');
end;

function TRectangleHelper.GetLeftColumn: TLayout;
var
  I: Integer;
  LTrack: TLayout;
begin
  Result := nil;
  if Column = 1 then
    exit;

  Result := TLayout(Parent.Parent.Children[Column-2]);
end;

function TRectangleHelper.GetRightColumn: TLayout;
begin
  Result := nil;
  if Column = 5 then
    exit;

  Result := TLayout(Parent.Parent.Children[Column]);
end;

function TRectangleHelper.getValue: Single;
begin
  Result := Tag;
end;

function TRectangleHelper.Line: Integer;
begin
  Result := Parent.Children.IndexOf(Self);
end;

procedure TRectangleHelper.setValue(const Value: Single);
begin
  Tag := Round(Value);

  if Value <= Power(2,13) then
    FindLabel.Text := Value.ToString
  else if Value <= Power(2,20) then
    FindLabel.Text := Format('%dK', [Floor(Value/1024)])
  else if Value <= Power(2,30) then
    FindLabel.Text := Format('%dM', [Floor(Value/(1024*1024))])
  else if Value <= Power(2,40) then
    FindLabel.Text := Format('%dG', [Floor(Value/(1024*1024*1024))])
  else
    FindLabel.Text := Format('%dT', [Floor(Value/Power(2,40))]);

  TAnimator.AnimateColor(FindBackground, 'Fill.Color', ColorList.Items[Value], 0.3);
end;

initialization
  ColorList := TDictionary<Double, TAlphaColor>.Create;
  ColorList.Add(2, TAlphaColors.Yellowgreen);
  ColorList.Add(Power(2,2), TAlphaColors.Steelblue);
  ColorList.Add(Power(2,3), TAlphaColors.Indianred);
  ColorList.Add(Power(2,4), TAlphaColors.Indigo);
  ColorList.Add(Power(2,5), TAlphaColors.Gold);
  ColorList.Add(Power(2,6), TAlphaColors.Dodgerblue);
  ColorList.Add(Power(2,7), TAlphaColors.Firebrick);
  ColorList.Add(Power(2,8), TAlphaColors.Greenyellow);
  ColorList.Add(Power(2,9), TAlphaColors.Lightcoral);
  ColorList.Add(Power(2,10), TAlphaColors.Lightskyblue);
  ColorList.Add(Power(2,11), TAlphaColors.Mediumorchid);
  ColorList.Add(Power(2,12), TAlphaColors.Palevioletred);
  ColorList.Add(Power(2,13), TAlphaColors.Rosybrown);
  ColorList.Add(Power(2,14), TAlphaColors.Sandybrown);
  ColorList.Add(Power(2,15), TAlphaColors.Springgreen);
  ColorList.Add(Power(2,16), TAlphaColors.Tan);
  ColorList.Add(Power(2,17), TAlphaColors.Tomato);
  ColorList.Add(Power(2,18), TAlphaColors.Violet);
  ColorList.Add(Power(2,19), TAlphaColors.Palegreen);
  ColorList.Add(Power(2,20), TAlphaColors.Mediumspringgreen);
  ColorList.Add(Power(2,21), TAlphaColors.LegacySkyBlue);
  ColorList.Add(Power(2,22), TAlphaColors.Lightsteelblue);
  ColorList.Add(Power(2,23), TAlphaColors.Lightsalmon);
  ColorList.Add(Power(2,24), TAlphaColors.Lightpink);
  ColorList.Add(Power(2,25), TAlphaColors.Lightcoral);
  ColorList.Add(Power(2,26), TAlphaColors.Lavender);
  ColorList.Add(Power(2,27), TAlphaColors.Hotpink);
  ColorList.Add(Power(2,28), TAlphaColors.Goldenrod);
  ColorList.Add(Power(2,29), TAlphaColors.Deeppink);
  ColorList.Add(Power(2,30), TAlphaColors.Darkslateblue);
  ColorList.Add(Power(2,31), TAlphaColors.Darkred);
  ColorList.Add(Power(2,32), TAlphaColors.Darkorchid);
  ColorList.Add(Power(2,33), TAlphaColors.Darkorange);
  ColorList.Add(Power(2,34), TAlphaColors.Darkmagenta);
  ColorList.Add(Power(2,35), TAlphaColors.Crimson);
  ColorList.Add(Power(2,36), TAlphaColors.Coral);
  ColorList.Add(Power(2,37), TAlphaColors.Chocolate);
  ColorList.Add(Power(2,38), TAlphaColors.Chartreuse);
  ColorList.Add(Power(2,39), TAlphaColors.Khaki);
  ColorList.Add(Power(2,40), TAlphaColors.Palegreen);
  ColorList.Add(Power(2,41), TAlphaColors.Thistle);

finalization
  ColorList.Free;

end.
